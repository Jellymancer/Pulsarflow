//Pipeline defaults
params {

// Target to Followup
target_name = "NGC2808"
filterbank_list = "${baseDir}/targets.txt"
//UTC Date Format: yyyy-mm-dd
utc_start = "2024-03-12"
utc_end = "2024-03-12"

// Singularity Images 
pulsarx_singularity_image = "/hercules/u/jjawor/containers/psrx/"
search_singularity_image = "/hercules/u/jjawor/containers/peasoup.sif"
utility_singularity_image = "/hercules/u/jjawor/containers/psrtools/" 
presto5_singularity_image = "/hercules/u/jjawor/containers/presto5/"
python2_singularity_image = "/hercules/u/jjawor/containers/trapum_pulsarx_fold_docker_20220411.sif"

// Filtool Arguments
//Do you want to use filtool to clean your observations? 1=yes, 0=no 
use_filtool = 1
// Filtool arguments
telescope = "meerkat"
filtool_rfi_filter_list = ["kadaneF 8 4"] // Manual commands for RFI cleaning. E.g. ["kadaneF 8 4"]
filtool_rfi_channel_mask_pairs = ""
filtool_threads = 20

// Filterbank split
// Do you want to split the filterbank into chunks prior to searching? 
split_filterbank = 0
// Split arguments
split_script = "${baseDir}/scripts/split_filterbank.py"
split_blocks = 2


// DM split arguments
dm_create_script = "${baseDir}/scripts/create_DM_subdivisions.py"
dm_start = 100
dm_end = 120
dm_step = 0.1
no_dm_splits = 1
dm_decimals = 2
dm_out_dir = "${baseDir}/out/DM_RANGES"
phase_predictor = "${baseDir}/scripts/create_phase_predictor_dspsr_peasoup_period_range_cands.py"


// Acceleration values
// Do you want to automatically calculate the max acceleration range based on the filterbank length?
calculate_max_accel = 1
max_accel_script = "${baseDir}/scripts/find_acc_range.py"

// Alternatively, provide a manual value for the accelerations
acc_start = "-15.0"
acc_end = "15.0"


// Peasoup Arguments. Stays the same for APSUSE and PTUSE observations. Code figures out the right power of two size for FFT.
min_snr = "7.0"
ram_limit_gb = "70.0"
nh = "5"
ngpus = "1"
total_cands_limit = "300"
kill_file = "${baseDir}/killfile.txt"


// Aggregation script
aggregate_script = "${baseDir}/scripts/read_xmls.py"


// Sifting
sift_script = "${baseDir}/sifting/sift_pointing.py"
sift_default_config = "${baseDir}/sifting/default_config.json"

// pulsarx folding
fold_script = "${baseDir}/scripts/fold_peasoup_pulsarx.py"
pulsarx_fold_template = "${baseDir}/meerkat_fold.template"
psrfold_fil_threads = 44
no_cands_to_fold = 300
psrfold_fil_channel_mask = ""
psrfold_fil_nh = 1
min_snr_fold = 6.0

// classification
classify_script = "${baseDir}/SLURM_PULSARMINER/pics_classifier_multiple_models.py"
model_dir = "${baseDir}/ml_models"
classify_min_fold_snr = null


// Prepare for candyjar 
prepare_for_candyjar_script = "${baseDir}/scripts/prepare_cands_for_candyjar_pulsarx.py"
metafile = "${baseDir}/2024-09-29T02:35:38.meta"

}

process {

    withName: generateDMFiles {
        publishDir = [
            path: "${params.dm_out_dir}",
            pattern: "*.txt",
            mode: 'copy',
        ]
    }

    // If one observation fails, it will only stop downstream processes, but not the other independent proccess
    // errorStrategy = 'ignore'   

}


profiles {

   local {
    includeConfig 'local.config' 
 }

   condor {
    includeConfig 'condor.config'
   }

   slurm {
    includeConfig 'slurm.config'
   }
}
